#!/usr/bin/env python3
import os
import re
from pathlib import Path

def merge_duplicate_scenarios(content):
    """
    AynÄ± senaryo numarasÄ±nÄ±n farklÄ± dillerde tekrar tekrar yazÄ±ldÄ±ÄŸÄ± durumlarÄ± birleÅŸtirir.
    """
    # TÃ¼m senaryo bloklarÄ± ve iÃ§eriklerini bul
    scenario_blocks = {}
    
    # Pattern: ### ğŸ§ª Senaryo X: AÃ§Ä±klama ... ile baÅŸlayan bloklarÄ± yakala
    pattern = r'(### ğŸ§ª Senaryo (\d+): [^\n]+(?:\n(?!### ğŸ§ª Senaryo|$).*)*)'
    matches = re.findall(pattern, content, re.MULTILINE | re.DOTALL)
    
    for full_match, scenario_num in matches:
        scenario_num = int(scenario_num)
        
        # Senaryo aÃ§Ä±klamasÄ±nÄ± Ã§Ä±kar
        description_match = re.search(r'### ğŸ§ª Senaryo \d+: (.+)', full_match)
        description = description_match.group(1) if description_match else ""
        
        # Bu bloktan dil kodlarÄ±nÄ± Ã§Ä±kar
        lang_pattern = r'(\*\*ğŸ’» Dil:\*\* `[^`]+`.*?(?=\*\*ğŸ’» Dil:\*\*|$))'
        lang_blocks = re.findall(lang_pattern, full_match, re.DOTALL)
        
        if scenario_num not in scenario_blocks:
            scenario_blocks[scenario_num] = {
                'description': description,
                'lang_blocks': []
            }
        
        # Dil bloklarÄ±nÄ± ekle
        scenario_blocks[scenario_num]['lang_blocks'].extend(lang_blocks)
    
    # EÄŸer birden fazla aynÄ± senaryo varsa, birleÅŸtir
    if len(scenario_blocks) > 0:
        # Yeni content oluÅŸtur
        new_content = ""
        for scenario_num in sorted(scenario_blocks.keys()):
            scenario_data = scenario_blocks[scenario_num]
            
            # Senaryo baÅŸlÄ±ÄŸÄ±
            new_content += f"### ğŸ§ª Senaryo {scenario_num}: {scenario_data['description']}\n\n"
            
            # TÃ¼m dil bloklarÄ±nÄ± ekle
            for i, lang_block in enumerate(scenario_data['lang_blocks']):
                new_content += lang_block.strip() + "\n\n"
                
                # Son blok deÄŸilse --- ekle
                if i < len(scenario_data['lang_blocks']) - 1:
                    # Dil bloklarÄ± arasÄ± --- ekleme
                    pass
            
            # Senaryolar arasÄ± --- ekle
            if scenario_num < max(scenario_blocks.keys()):
                new_content += "---\n\n"
        
        return new_content.strip()
    
    return content

def standardize_file_format(file_path):
    """
    Dosyadaki format farklÄ±lÄ±klarÄ±nÄ± dÃ¼zeltir ve standardize eder.
    """
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # DeÄŸiÅŸiklik yapÄ±ldÄ± mÄ± kontrolÃ¼
    modified = False
    
    # AynÄ± senaryo numarasÄ±nÄ±n tekrar tekrar yazÄ±ldÄ±ÄŸÄ± durumlarÄ± birleÅŸtir
    merged_content = merge_duplicate_scenarios(content)
    if merged_content != content:
        content = merged_content
        modified = True
    
    # 1. Senaryo baÅŸlÄ±k formatÄ±nÄ± dÃ¼zelt (Gemini'de ### yok)
    if not content.startswith('### ğŸ§ª'):
        content = re.sub(r'^ğŸ§ª Senaryo (\d+):', r'### ğŸ§ª Senaryo \1:', content, flags=re.MULTILINE)
        modified = True
    
    # 2. Dil formatÄ±nÄ± dÃ¼zelt
    # Gemini formatÄ±: ğŸ’» Dil: C# -> **ğŸ’» Dil:** `C#`
    content = re.sub(r'^ğŸ’» Dil: ([^\n]+)$', r'**ğŸ’» Dil:** `\1`', content, flags=re.MULTILINE)
    if re.search(r'ğŸ’» Dil: [^\n]+', content):
        modified = True
    
    # 3. AI formatÄ±nÄ± dÃ¼zelt
    # Gemini formatÄ±: ğŸ¤– AI: Gemini -> **ğŸ¤– AI:** Gemini
    content = re.sub(r'^ğŸ¤– AI: ([^\n]+)$', r'**ğŸ¤– AI:** \1', content, flags=re.MULTILINE)
    if re.search(r'ğŸ¤– AI: [^\n]+', content):
        modified = True
    
    # 4. SatÄ±r sayÄ±sÄ± formatÄ±nÄ± standardize et
    # ChatGPT: SatÄ±r SayÄ±sÄ±: 19
    # Claude: **SatÄ±r SayÄ±sÄ±:** 8
    # Gemini: **SatÄ±r SayÄ±sÄ±:** 42
    # DeepSeek: SatÄ±r SayÄ±sÄ±: 16
    # Hepsi "**SatÄ±r SayÄ±sÄ±:** XX" formatÄ±na Ã§evrilecek
    
    # "SatÄ±r SayÄ±sÄ±: X" formatÄ±nÄ± "**SatÄ±r SayÄ±sÄ±:** X" formatÄ±na Ã§evir
    if re.search(r'^SatÄ±r SayÄ±sÄ±: \d+', content, re.MULTILINE):
        content = re.sub(r'^SatÄ±r SayÄ±sÄ±: (\d+)', r'**SatÄ±r SayÄ±sÄ±:** \1', content, flags=re.MULTILINE)
        modified = True
    
    # "**SatÄ±r SayÄ±sÄ±** X" formatÄ±nÄ± da dÃ¼zelt
    if re.search(r'\*\*SatÄ±r SayÄ±sÄ±\*\* \d+', content):
        content = re.sub(r'\*\*SatÄ±r SayÄ±sÄ±\*\* (\d+)', r'**SatÄ±r SayÄ±sÄ±:** \1', content)
        modified = True
    
    # 5. Senaryo aralarÄ±nda --- ekle (eksikse)
    content = re.sub(r'\n(### ğŸ§ª Senaryo [2-9]\d*:)', r'\n---\n\n\1', content)
    if not re.search(r'---\n\n### ğŸ§ª Senaryo [2-9]', content):
        modified = True
    
    # 6. Her dilin arasÄ±nda --- ekle (eksikse)
    # TypeScript'ten sonra baÅŸka bir dil geliyorsa
    patterns_to_check = [
        (r'(```\n\n)\*\*ğŸ’» Dil:\*\*', r'\1---\n\n**ğŸ’» Dil:**'),
        (r'(```typescript[^`]*```\n\n)\*\*ğŸ’» Dil:\*\*', r'\1---\n\n**ğŸ’» Dil:**'),
        (r'(```python[^`]*```\n\n)\*\*ğŸ’» Dil:\*\*', r'\1---\n\n**ğŸ’» Dil:**'),
        (r'(```csharp[^`]*```\n\n)\*\*ğŸ’» Dil:\*\*', r'\1---\n\n**ğŸ’» Dil:**'),
        (r'(```ts[^`]*```\n\n)\*\*ğŸ’» Dil:\*\*', r'\1---\n\n**ğŸ’» Dil:**'),
    ]
    
    for pattern, replacement in patterns_to_check:
        if re.search(pattern, content, re.DOTALL):
            content = re.sub(pattern, replacement, content, flags=re.DOTALL)
            modified = True
    
    # DosyayÄ± gÃ¼ncelle
    if modified:
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        return True
    return False

def main():
    results_dir = Path('sonuÃ§lar')
    total_files = 0
    modified_files = 0
    
    # TÃ¼m AI klasÃ¶rlerini gez
    for ai_folder in results_dir.iterdir():
        if not ai_folder.is_dir():
            continue
        
        print(f"\n{ai_folder.name} klasÃ¶rÃ¼ iÅŸleniyor...")
        
        # Her CWE dosyasÄ±nÄ± iÅŸle
        for md_file in ai_folder.glob('cwe-*.md'):
            total_files += 1
            
            if standardize_file_format(md_file):
                modified_files += 1
                print(f"  âœ“ {md_file.name} standardize edildi")
            else:
                print(f"  - {md_file.name} zaten standart formatta")
    
    print(f"\nğŸ“Š Ã–zet:")
    print(f"Toplam dosya: {total_files}")
    print(f"GÃ¼ncellenen dosya: {modified_files}")
    print(f"DeÄŸiÅŸmeden kalan: {total_files - modified_files}")

if __name__ == "__main__":
    main() 